package org.example.class4.hw;

import java.util.List;

public interface Problems {

    /**
     * Функция для поиска максимального элемента в массиве чисел.
     * Подумать, как обрабатывать ситуации, если массив равен null или пустой
     *
     * @param array
     * @return максимальное число в массиве
     */
    int getMaxNumber(int[] array);

    /**
     * Функция для поиска максимального элемента в массиве чисел.
     * Подумать, как обрабатывать ситуации, если массив равен null или пустой
     *
     * @param list
     * @return максимальное число в массиве
     */
    int getMaxNumber(List<Integer> list);

    /**
     * Функция для подсчета суммы элементов массива
     * Подумать, как обрабатывать ситуации, если массив равен null или пустой
     * @param array
     * @return сумму элементов массива
     */
    int getSum(int[] array);

    /**
     * Функция для подсчета суммы элементов массива
     * Подумать, как обрабатывать ситуации, если массив равен null или пустой
     * @param list
     * @return сумму элементов массива
     */
    int getSum(List<Integer> list);

    /**
     * Убрать из массива повторяющиеся элементы.
     * Решение - преобразовать к Set, потом преобразовать обратно к List
     * @param list
     * @return массив без повторяющихся элементов
     */
    List<Integer> removeDuplicates(List<Integer> list);

    /**
     * Найти в массиве элемент, который встречается чаще остальных и вернуть его.
     * Задача делится на две:
     * 1. Пройтись по массиву. И положить текущий элемент в качестве ключа в мапу.
     * Если в мапе такого элемента нет, то у этого ключа значение 1.
     * Если в мапе такой элемент уже есть, то взять значение по ключу и прибавить 1.
     *
     * 2. В получившейся мапе найти максимальное значение и получить ключ этого значения.
     * @param list
     * @return
     */
    int findMostFrequentItem(List<Integer> list);
}
//1 попытка